---
- name: install ipmitool
  package:
    name: ipmitool
    state: present

- name: load ipmi kernel modules
  modprobe:
    name: "{{ item }}"
    state: present
  loop: "{{ impi_kernel_modules }}"

- name: create directory for ansible custom facts
  file:
    state: directory
    recurse: yes
    path: /etc/ansible/facts.d

- name: install custom impi fact
  template:
    src: "ipmi.fact.j2"
    dest: "/etc/ansible/facts.d/ipmi.fact"
    mode: 0755
  register: config_status

- name: re-gather facts using sudo for ipmitool
  # NOTE: setup module returns empty ipmi section unless it runs as root
  setup:
    filter: ansible_local
  when: config_status is changed or not ansible_local.ipmi.lan_1

- name: create local host_vars directory
  become: false
  file:
    state: directory
    recurse: yes
    path: "{{ impi_host_settings_save_path|dirname }}"
  when: get_ipmi
  delegate_to: "localhost"

- name: save ipmi facts to local file in host_vars
  become: false
  copy:
    content: |
      # {{ ansible_hostname }} at {{ inventory_hostname }} {{ ansible_ssh_host if ansible_ssh_host is defined else '' }}
      ipmi:
        vlan: {% if ansible_local.ipmi.lan_1.qvlanid == "Disabled" %}0
      {% else %}{{ ansible_local.ipmi.lan_1.qvlanid }}
      {% endif %}
        address: {{ ansible_local.ipmi.lan_1.ipaddress }}
        address_source: StaticAddress
        netmask: {{ ansible_local.ipmi.lan_1.subnetmask }}
        gw: {{ ansible_local.ipmi.lan_1.defaultgatewayip }}
    dest: "{{ impi_host_settings_save_path }}"
  when: get_ipmi
  delegate_to: "localhost"
  delegate_facts: True

## only if set_ipmi == True and ipmi host_var exists
- debug: msg="vlan match={{ ansible_local.ipmi.lan_1.qvlanid == ipmi.vlan or ( ansible_local.ipmi.lan_1.qvlanid == 'Disabled' and ipmi.vlan == 0 ) }} current={{ ansible_local.ipmi.lan_1.qvlanid }} new={{ ipmi.vlan }}"
  when: ipmi is defined
  changed_when: ipmi is defined and
        not ( ansible_local.ipmi.lan_1.qvlanid == ipmi.vlan or
        ( ansible_local.ipmi.lan_1.qvlanid == 'Disabled' and ipmi.vlan == 0 ))
- name: set ipmi vlan
  command: ipmitool lan set {{ lan_channel }} vlan id "{% if ipmi.vlan == 0 %}off{% else %}{{ ipmi.vlan }}{% endif %}"
  when: set_ipmi and ipmi is defined and
        not ( ansible_local.ipmi.lan_1.qvlanid == ipmi.vlan or
        ( ansible_local.ipmi.lan_1.qvlanid == 'Disabled' and ipmi.vlan == 0 ))

- debug: msg="ipsource match={{ ansible_local.ipmi.lan_1.ipaddresssource == ipmi.address_source }} current={{ ansible_local.ipmi.lan_1.ipaddresssource }} new={{ ipmi.address_source }}"
  when: ipmi is defined
  changed_when: ipmi is defined and
        ansible_local.ipmi.lan_1.ipaddresssource != ipmi.address_source
- name: set ipmi address source
  command: ipmitool lan set {{ lan_channel }} ipsrc "{{ 'static' if ipmi.address_source|lower == "staticaddress" else 'dhcp' }}"
  when: set_ipmi and ipmi is defined and
        ansible_local.ipmi.lan_1.ipaddresssource != ipmi.address_source

- debug: msg="ipaddr match={{ ansible_local.ipmi.lan_1.ipaddress == ipmi.address }} current={{ ansible_local.ipmi.lan_1.ipaddress }} new={{ ipmi.address }}"
  when: ipmi is defined
  changed_when: ipmi is defined and
        ansible_local.ipmi.lan_1.ipaddress != ipmi.address
- name: set ipmi address
  command: ipmitool lan set {{ lan_channel }} ipaddr "{{ ipmi.address }}"
  when: set_ipmi and ipmi is defined and
        ansible_local.ipmi.lan_1.ipaddress != ipmi.address

- debug: msg="netmask match={{ ansible_local.ipmi.lan_1.subnetmask == ipmi.netmask }} current={{ ansible_local.ipmi.lan_1.subnetmask }} new={{ ipmi.netmask }}"
  when: ipmi is defined
  changed_when: ipmi is defined and
        ansible_local.ipmi.lan_1.subnetmask != ipmi.netmask
- name: set ipmi netmask
  command: ipmitool lan set {{ lan_channel }} netmask "{{ ipmi.netmask }}"
  when: set_ipmi and ipmi is defined and
        ansible_local.ipmi.lan_1.subnetmask != ipmi.netmask

- debug: msg="gateway match={{ ansible_local.ipmi.lan_1.defaultgatewayip == ipmi.gw }} current={{ ansible_local.ipmi.lan_1.defaultgatewayip }} new={{ ipmi.gw }}"
  when: ipmi is defined
  changed_when: ipmi is defined and
        ansible_local.ipmi.lan_1.defaultgatewayip != ipmi.gw
- name: set ipmi gateway
  command: ipmitool lan set {{ lan_channel }} defgw ipaddr "{{ ipmi.gw }}"
  when: set_ipmi and ipmi is defined and
        ansible_local.ipmi.lan_1.defaultgatewayip != ipmi.gw
